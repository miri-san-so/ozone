from tkinter import Label, Radiobutton, Entry, Tk, Frame, Button, IntVar
from usb import locate_usb
from file_rw import write_on_file
from crypt import give_new_key
from tkinter import ttk, StringVar
from dates import give_date
from ozone_aes import encrypt_file
import os
import glob


def create_window():    # function to create main window 

    t = Tk()    # creating the main window 
    t.resizable(width=False, height=False) # making the window non-resizable
    t.geometry('900x500')   # setting strict size of window
    t.config(bg='#1a1a1a')  # setting background color of the window

    def get_value(alias, pwd, drive, root): # gets the value when the submit button is clicked
        
        if len(pwd) < 8:    # display error if the length of password is less than 8 
            err = Label(
                root, text="e n t e r   s t r o n g   p a s s w o r d *", fg="red", bg="#1a1a1a")   # created error label to display 
            err.place(x=280, y=220) # placing error under the password text field
        
        else:               # if the password length is more than 8
            import os
            import json
            
            dir = os.getcwd()   # gets current directory

            counter = 0         # initalize counter with 0 as its the setup phase
            new_key = give_new_key(counter) # new key holds a key generated by give_new_key() 
            write_on_file(drive, new_key)   # writes the key value on the file 

            encrypt_file("{}access".format(drive))  # encrypting the key on the USB

            alias = alias       # stores alias by user
            password = pwd      # stores password by user
            drive = drive       # stores the drive selected
            date_modified = give_date("{}access".format(drive)) # Get the modified date of the file on USB

            data_dict = {"alias": "{}".format(alias), "pwd": "{}".format(password), "counter": "0", "initial_key": "{}".format(
                new_key), "drive": "{}".format(drive), "new_key": "{}".format(new_key), "date_modified": "{}".format(date_modified)}

            # Create the dict for making a JSON

            data_json = json.dumps(data_dict, indent=3)    # Creating a JSON 

            # Saving the JSON  
            f = open("{}\\curwd".format(dir), "w")      
            f.write(data_json)  
            f.close()

            encrypt_file("{}\\curwd".format(dir)) # encrypting the file on Dir

            # Closing the main window
            root.destroy()

            # Creating the Acknowledgement window
            t = Tk()
            
            # making the window un-resizable
            t.resizable(width=False, height=False)
            
            # setting strict geometry
            t.geometry('600x250')
            
            # setting the background of the window
            t.config(bg='#1a1a1a')
            
            # creating and placing the notice label
            notice = Label(t, text="Do not delete the access file on your USB and any files from the current directory", font=(
                "Helvetica", 12), fg="red", bg="#1a1a1a")
            notice.place(x=20, y=60)
            
            # Label to tell user to open ozone.exe
            notice2 = Label(t, text="o p e n   t h e   o z o n e . e x e", font=(
                "Helvetica", 12), fg="#8fdcdf", bg="#1a1a1a")
            notice2.place(x=20, y=100)

            # Exit button 
            goodbye = Button(t, text="a l v i d a !", font=("Times_New_roman", 12), fg="#8fdcdf", bg="#1a1a1a",
                             activebackground="#1a1a1a", activeforeground="#8fdcdf", padx=3, pady=3, borderwidth=2, command=lambda: close(t))
            goodbye.config(highlightbackground="#8fdcdf",
                           highlightcolor="#8fdcdf", highlightthickness=10, relief="solid")
            goodbye.place(x=230, y=140)

            t.mainloop()

    # functions to close the windows
    def close(root):
        root.destroy()

    def close2(root):
        root.destroy()

    # Ozone Label
    ozone = Label(t, text="l  e  t  s    c  r  e  a  t  e    y  o  u  r    o  z  o n  e    k  e  y .", font=(
        "Helvetica", 12), fg="#8fdcdf", bg="#1a1a1a")
    ozone.place(x=250, y=70)

    # Alias Label
    alias_label = Label(t, text="a l i a s : ", font=(
        "Helvetica", 12), fg="#8fdcdf", bg="#1a1a1a")
    alias_label.place(x=200, y=130)

    # Alias Entry
    frame1 = Frame(t, height=22, width=30, bg="#8fdcdf",
                   bd=2, highlightbackground="#8fdcdf")
    alias = Entry(frame1, bg="#1a1a1a", width=40, fg="#8fdcdf",
                  font=("Helvetica", 12), insertbackground="cyan")
    alias.grid(column=2)
    frame1.place(x=280, y=130)

    # pwd Label
    pwd_label = Label(t, text="p a s s w d : ", font=(
        "Helvetica", 12), fg="#8fdcdf", bg="#1a1a1a")
    pwd_label.place(x=175, y=190)

    # pwd Entry
    frame2 = Frame(t, height=22, width=30, bg="#8fdcdf",
                   bd=2, highlightbackground="#8fdcdf")
    pwd = Entry(frame2, bg="#1a1a1a", width=40, fg="#8fdcdf",
                show="*", font=("Helvetica", 12), insertbackground="cyan")
    pwd.grid(column=2)
    frame2.place(x=280, y=190)

    # USB selection

    # Header
    header = Label(t, text="s e l e c t   U S B   t o   m a k e   k e y  ", font=(
        "Helvetica", 12), fg="#8fdcdf", bg="#1a1a1a")
    header.place(x=310, y=250)
    
    # making combobox
    myDevice = StringVar()
    combo = ttk.Combobox(t, width=15, textvariable=myDevice, state="readonly")
    combo['values'] = locate_usb()  # setting values from the locate_usb()
    combo.place(x=310, y=280)

    # telling to restart the program if no USB is connected
    if locate_usb() == []:
        err = Label(
            t, text="e n t e r   U S B   t o   c r e a t e   k e y *", fg="red", bg="#1a1a1a")
        err.place(x=310, y=310)
        err2 = Label(
            t, text="p l e a s e   r e o p e n   t h e   p r o g r a m*", fg="red", bg="#1a1a1a")
        err2.place(x=310, y=330)
        
        submit = Button(t, text="c r e a t e   k e y ", font=("Helvetica", 12), fg="#8fdcdf", bg="#1a1a1a", activebackground="#1a1a1a",
                        activeforeground="#8fdcdf", padx=3, pady=3, borderwidth=2, state="disabled", command=lambda: get_value(alias.get(), pwd.get(), myDevice.get(), t))
        submit.config(highlightbackground="#8fdcdf",
                      highlightcolor="#8fdcdf", highlightthickness=10, relief="solid")
        submit.place(x=380, y=390)
    else:
        # submit button
        submit = Button(t, text="c r e a t e   k e y ", font=("Helvetica", 12), fg="#8fdcdf", bg="#1a1a1a", activebackground="#1a1a1a",
                        activeforeground="#8fdcdf", padx=3, pady=3, borderwidth=2, command=lambda: get_value(alias.get(), pwd.get(), myDevice.get(), t))
        submit.config(highlightbackground="#8fdcdf",
                      highlightcolor="#8fdcdf", highlightthickness=10, relief="solid")
        submit.place(x=380, y=390)

    t.mainloop()


create_window()
